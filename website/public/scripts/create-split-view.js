/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/common/html-element-factory/AssemblyLine.ts":
/*!*********************************************************!*\
  !*** ./src/common/html-element-factory/AssemblyLine.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SelectAssemblyLine = exports.AnchorElementAssemblyLine = void 0;\nfunction toNodes(children) {\n    const out = [];\n    for (const c of children) {\n        if (c instanceof Node)\n            out.push(c);\n        else if (c instanceof AssemblyLine)\n            out.push(c.make());\n    }\n    return out;\n}\n/**\n * An AssemblyLine is a type of object that makes the construction\n * of HTMLElement objects easier. All methods (except for ```make()```)\n * return ```this```, making for easy method-chaining.\n *\n * @param TN tag of the HTMLElement that will be output by its ```make()``` method\n */\nclass AssemblyLine {\n    constructor(tagName) {\n        this.elementTypeSpecific = {};\n        this._classes = new Set();\n        this._attributes = {};\n        this._children = [];\n        this._styleProps = {};\n        this._handlers = {};\n        this.tagName = tagName; // store tag for element creation\n    }\n    /** Sets the id of the new element. */\n    id(newId) {\n        this._id = newId;\n        return this;\n    }\n    /** Adds classes to the new element */\n    class(...classes) {\n        for (const c of classes) {\n            if (typeof c === \"string\")\n                this._classes.add(c);\n        }\n        return this;\n    }\n    /** Sets a single attribute of the new element. */\n    attr(k, v = \"\") {\n        if (v !== null)\n            this._attributes[k] = v.toString();\n        return this;\n    }\n    /** Sets multiple attributes of the new element. */\n    attrs(attributes) {\n        for (const k in attributes)\n            this._attributes[k] = attributes[k].toString();\n        return this;\n    }\n    /** Sets the ```innerText``` property. */\n    text(txt) {\n        this._text = txt;\n        return this;\n    }\n    /** Provides text to be displayed when hovering over the element (value for the ```title``` attribute) */\n    tooltip(txt) {\n        if (txt)\n            this._tooltip = txt;\n        return this;\n    }\n    /** Sets the ```innerHTML``` property. */\n    html(html) {\n        this._html = html;\n        return this;\n    }\n    /** Provides child elements to be appended to the output element. */\n    children(...children) {\n        this._children.push(...children.filter(n => n !== null));\n        return this;\n    }\n    /** Defines key-value pairs for CSS-properties. */\n    style(styleMap) {\n        for (const k in styleMap) {\n            if (styleMap[k] !== null)\n                this._styleProps[k] = styleMap[k].toString();\n        }\n        return this;\n    }\n    on(keyword, handler) {\n        this._handlers[keyword] = handler;\n        return this;\n    }\n    /** Provides a callback to be run after the element is created. */\n    onMake(handler) {\n        this._onMake = handler;\n        return this;\n    }\n    /** Finalizes and creates the new element. */\n    make() {\n        const out = document.createElement(this.tagName);\n        // id, class and attributes\n        if (this._id !== undefined)\n            out.id = this._id;\n        if (this._classes.size > 0)\n            out.classList.add(...this._classes);\n        for (const k in this._attributes)\n            out.setAttribute(k, this._attributes[k]);\n        // innerHTML\n        if (this._html)\n            out.innerHTML = this._html;\n        // text\n        if (this._text !== undefined)\n            out.innerText = this._text;\n        if (this._tooltip !== undefined)\n            out.title = this._tooltip;\n        // children\n        for (const c of this._children) {\n            if (c) {\n                if (c instanceof Node)\n                    out.appendChild(c);\n                else if (c instanceof AssemblyLine)\n                    out.appendChild(c.make());\n                else {\n                    let res = c(out);\n                    if (!Array.isArray(res))\n                        res = [res];\n                    out.append(...toNodes(res));\n                }\n            }\n        }\n        // style\n        for (const k in this._styleProps)\n            out.style.setProperty(k, this._styleProps[k]);\n        // element-type specific properties\n        for (const k in this.elementTypeSpecific)\n            out[k] = this.elementTypeSpecific[k];\n        // event-handlers\n        for (const keyword of Object.keys(this._handlers)) {\n            const key = keyword;\n            const handler = this._handlers[key];\n            out.addEventListener(key, e => handler(e, out));\n        }\n        if (this._onMake !== undefined)\n            this._onMake(out);\n        return out;\n    }\n    /**\n     * Provides a way to create an AssemblyLine for a specific element type, without\n     * creating a new class for each one.\n     * @param tagName tag of the HTMLElement of the output AssemblyLine\n     * @param exposedKeys keys of specific properties of the out HTMLElement type\n     * @returns AssemblyLine with extra methods to set the properties with the keys from 'exposedKeys'\n     */\n    static specific(tagName, exposedKeys) {\n        const out = new AssemblyLine(tagName);\n        for (const k of exposedKeys)\n            Reflect.defineProperty(out, k, {\n                writable: false,\n                value: (newVal) => {\n                    out.elementTypeSpecific[k] = newVal;\n                    return out;\n                }\n            });\n        return out;\n    }\n}\nexports[\"default\"] = AssemblyLine;\n/**\n * An AnchorElementAssemblyLine is a type of AssemblyLine for creating anchor (\\<a>) tags\n */\nclass AnchorElementAssemblyLine extends AssemblyLine {\n    constructor() {\n        super(\"a\");\n        this._openInNewTab = false;\n    }\n    /** Provides the URL that the anchor will link to. */\n    href(linkTo) {\n        this._href = linkTo;\n        return this;\n    }\n    /** Determines whether the link opens in a new tab. */\n    openInNewTab(openInNewTab) {\n        this._openInNewTab = openInNewTab;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        if (this._href !== undefined)\n            out.href = this._href;\n        if (this._openInNewTab)\n            out.target = \"_blank\";\n        return out;\n    }\n}\nexports.AnchorElementAssemblyLine = AnchorElementAssemblyLine;\nclass SelectAssemblyLine extends AssemblyLine {\n    constructor() {\n        super(\"select\");\n        this._options = {};\n    }\n    /** Adds a single option to the select element. */\n    option(value, displayText = value, hidden = false) {\n        this._options[value] = [displayText, hidden];\n        return this;\n    }\n    /** Adds multiple options at once to the select element. */\n    options(values) {\n        if (Array.isArray(values))\n            values.forEach(v => {\n                if (Array.isArray(v))\n                    this._options[v[0]] = v;\n                else\n                    this._options[v] = [v, false];\n            });\n        else\n            for (const v in values) {\n                const display = values[v];\n                this._options[v] = Array.isArray(display) ? display : [display, false];\n            }\n        return this;\n    }\n    value(value) {\n        this._value = value;\n        return this;\n    }\n    onValueChanged(callback) {\n        this._onValueChanged = callback;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        for (const v in this._options) {\n            const option = document.createElement(\"option\");\n            option.value = v;\n            option.selected = v === this._value;\n            option.innerText = this._options[v][0];\n            if (this._options[v][1])\n                option.hidden = true;\n            out.options.add(option);\n        }\n        window.addEventListener(\"change\", e => {\n            if (e.target === out)\n                out.prevValue = out.value;\n        });\n        if (this._onValueChanged) {\n            const valueCallback = this._onValueChanged;\n            out.addEventListener(\"change\", () => valueCallback(out.value, out.prevValue));\n        }\n        return out;\n    }\n}\nexports.SelectAssemblyLine = SelectAssemblyLine;\n\n\n//# sourceURL=webpack://gws-website/./src/common/html-element-factory/AssemblyLine.ts?");

/***/ }),

/***/ "./src/common/html-element-factory/ElementFactory.ts":
/*!***********************************************************!*\
  !*** ./src/common/html-element-factory/ElementFactory.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst NumberUtil_1 = __importDefault(__webpack_require__(/*! ../util/NumberUtil */ \"./src/common/util/NumberUtil.ts\"));\nconst AssemblyLine_1 = __importStar(__webpack_require__(/*! ./AssemblyLine */ \"./src/common/html-element-factory/AssemblyLine.ts\"));\nconst InputAssemblyLine_1 = __webpack_require__(/*! ./InputAssemblyLine */ \"./src/common/html-element-factory/InputAssemblyLine.ts\");\n/**\n * The ElementFactory helper-class provides static methods that allow\n * for easier creation of HTMLElement objects.\n */\nclass ElementFactory {\n    static header() { return new AssemblyLine_1.default(\"header\"); }\n    static footer() { return new AssemblyLine_1.default(\"footer\"); }\n    static div(id, ...classes) {\n        const out = new AssemblyLine_1.default(\"div\");\n        if (typeof id === \"string\")\n            out.id(id);\n        out.class(...classes);\n        return out;\n    }\n    /** A heading with the given size. */\n    static heading(size, text) {\n        size = NumberUtil_1.default.clamp(Math.floor(size), 1, 6);\n        return this[`h${size}`]();\n    }\n    static h1(text) {\n        const out = new AssemblyLine_1.default(\"h1\");\n        return text ? out.text(text) : out;\n    }\n    static h2(text) {\n        const out = new AssemblyLine_1.default(\"h2\");\n        return text ? out.text(text) : out;\n    }\n    static h3(text) {\n        const out = new AssemblyLine_1.default(\"h3\");\n        return text ? out.text(text) : out;\n    }\n    static h4(text) {\n        const out = new AssemblyLine_1.default(\"h4\");\n        return text ? out.text(text) : out;\n    }\n    static h5(text) {\n        const out = new AssemblyLine_1.default(\"h5\");\n        return text ? out.text(text) : out;\n    }\n    static h6(text) {\n        const out = new AssemblyLine_1.default(\"h6\");\n        return text ? out.text(text) : out;\n    }\n    static p(text) {\n        const out = new AssemblyLine_1.default('p');\n        return text ? out.text(text) : out;\n    }\n    static span(text) {\n        const out = new AssemblyLine_1.default('span');\n        return text ? out.text(text) : out;\n    }\n    static a(href, text) {\n        const out = new AssemblyLine_1.AnchorElementAssemblyLine();\n        if (href)\n            out.href(href);\n        return text ? out.text(text) : out;\n    }\n    static img(src, alt) {\n        const out = AssemblyLine_1.default.specific(\"img\", [\"src\", \"alt\"]);\n        if (src)\n            out.src(src);\n        return alt ? out.alt(alt) : out;\n    }\n    static button(onClick) {\n        const out = new AssemblyLine_1.default(\"button\");\n        if (onClick)\n            out.on(\"click\", onClick);\n        return out;\n    }\n    static textarea(text) {\n        const out = AssemblyLine_1.default.specific(\"textarea\", [\"value\", \"placeholder\", \"minLength\", \"maxLength\", \"readOnly\", \"spellcheck\"]);\n        if (text)\n            out.value(text);\n        return out;\n    }\n    static select(options = []) {\n        const out = new AssemblyLine_1.SelectAssemblyLine();\n        return out.options(options);\n    }\n    static option() { return AssemblyLine_1.default.specific(\"option\", [\"value\", \"selected\"]); }\n    static optgroup() { return AssemblyLine_1.default.specific(\"optgroup\", [\"label\"]); }\n    static hr() { return new AssemblyLine_1.default(\"hr\"); }\n    static br() { return new AssemblyLine_1.default(\"br\"); }\n}\n/** Methods for specific input-types. */\nElementFactory.input = {\n    button(value, onClick) {\n        const out = new InputAssemblyLine_1.ButtonLikeInputAssemblyLine(\"button\");\n        if (value !== undefined)\n            out.value(value);\n        return onClick ? out.onClick(onClick) : out;\n    },\n    checkbox() { return new InputAssemblyLine_1.CheckableInputAssemblyLine(\"checkbox\"); },\n    color(value) {\n        const out = new InputAssemblyLine_1.InputAssemblyLine(\"color\");\n        if (value)\n            out.value(value);\n        return out;\n    },\n    date(year, month, date) {\n        const out = new InputAssemblyLine_1.DateInputAssemblyLine(\"date\");\n        if (year !== undefined || month !== undefined || date !== undefined) {\n            const now = new Date();\n            year ?? (year = now.getFullYear());\n            month ?? (month = now.getMonth());\n            date ?? (date = now.getDate());\n            out.value(year, month, date);\n        }\n        return out;\n    },\n    dateTimeLocal(val) {\n        const out = new InputAssemblyLine_1.DateInputAssemblyLine(\"datetime-local\");\n        if (val)\n            out.value(val);\n        return out;\n    },\n    email() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"email\"); },\n    file() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"file\"); },\n    image() { return new InputAssemblyLine_1.InputAssemblyLine(\"image\"); },\n    month(year, month) {\n        const out = new InputAssemblyLine_1.DateInputAssemblyLine(\"month\");\n        if (year !== undefined && month !== undefined)\n            out.value(year, month);\n        else if (year !== undefined)\n            out.value(year, new Date().getMonth());\n        else if (month !== undefined)\n            out.value(new Date().getFullYear(), month);\n        return out;\n    },\n    number() { return new InputAssemblyLine_1.NumberInputAssemblyLine(\"number\"); },\n    password() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"password\"); },\n    radio() { return new InputAssemblyLine_1.CheckableInputAssemblyLine(\"radio\"); },\n    range() { return new InputAssemblyLine_1.NumberInputAssemblyLine(\"range\"); },\n    reset() { return new InputAssemblyLine_1.ButtonLikeInputAssemblyLine(\"reset\"); },\n    search() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"search\"); },\n    submit() { return new InputAssemblyLine_1.ButtonLikeInputAssemblyLine(\"submit\"); },\n    tel() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"tel\"); },\n    text(val) {\n        const out = new InputAssemblyLine_1.TextInputAssemblyLine(\"text\");\n        if (val)\n            out.value(val);\n        return out;\n    },\n    time() { return new InputAssemblyLine_1.RangedInputAssemblyLine(\"time\"); },\n    url() { return new InputAssemblyLine_1.TextInputAssemblyLine(\"url\"); },\n    week(year, week) {\n        const out = new InputAssemblyLine_1.DateInputAssemblyLine(\"week\");\n        if (year !== undefined && week !== undefined)\n            out.value(year, week);\n        else if (year !== undefined)\n            out.value(year, 1);\n        else if (week !== undefined)\n            out.value(new Date().getFullYear(), week);\n        return out;\n    }\n};\nexports[\"default\"] = ElementFactory;\n\n\n//# sourceURL=webpack://gws-website/./src/common/html-element-factory/ElementFactory.ts?");

/***/ }),

/***/ "./src/common/html-element-factory/InputAssemblyLine.ts":
/*!**************************************************************!*\
  !*** ./src/common/html-element-factory/InputAssemblyLine.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextInputAssemblyLine = exports.DateInputAssemblyLine = exports.NumberInputAssemblyLine = exports.RangedInputAssemblyLine = exports.CheckableInputAssemblyLine = exports.ButtonLikeInputAssemblyLine = exports.InputAssemblyLine = void 0;\nconst DateUtil_1 = __importDefault(__webpack_require__(/*! ../util/DateUtil */ \"./src/common/util/DateUtil.ts\"));\nconst AssemblyLine_1 = __importDefault(__webpack_require__(/*! ./AssemblyLine */ \"./src/common/html-element-factory/AssemblyLine.ts\"));\nconst INPUT_TYPE_TRANSLATORS = {\n    button: text => text,\n    checkbox: value => value,\n    color: (...args) => {\n        if (args.length === 1)\n            return args[0];\n        else {\n            const [r, g, b] = args;\n            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n        }\n    },\n    date: (...args) => {\n        return `${args[0].toString().padStart(4, '0')}-${(args[1] + 1).toString().padStart(2, '0')}-${args[2].toString().padStart(2, '0')}`;\n    },\n    \"datetime-local\": (...args) => {\n        if (args[0] instanceof Date) {\n            const d = DateUtil_1.default.Timestamps.copy(args[0]);\n            d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n            const iso = d.toISOString();\n            return iso.includes('.') ? iso.substring(0, iso.indexOf('.')) : iso;\n        }\n        else\n            return new Date(args[0], args[1], args[2], args[3], args[4]).toISOString();\n    },\n    email: email => email,\n    file: path => path,\n    hidden: value => value,\n    image: () => \"\",\n    month: (year, month) => `${year.toString().padStart(4, '0')}-${(month + 1).toString().padStart(2, '0')}`,\n    number: num => num.toString(),\n    password: password => password,\n    radio: value => value,\n    range: num => num.toString(),\n    reset: text => text,\n    search: query => query,\n    submit: text => text,\n    tel: telNumber => telNumber,\n    text: text => text,\n    time: (hrs, min) => `${hrs.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}`,\n    url: url => url,\n    week: (year, weekInd) => `${year.toString().padStart(4, '0')}-W${weekInd.toString().padStart(2, '0')}`\n};\n/**\n * An InputAssemblyLine is a type of AssemblyLine specifically for\n * creating HTMLInputElements.\n *\n * @param T 'type' field of the HTMLInputElement\n */\nclass InputAssemblyLine extends AssemblyLine_1.default {\n    constructor(type) {\n        super(\"input\");\n        this.type = type;\n    }\n    /** Provides the inputs 'value'. */\n    value(...value) {\n        this._value = value;\n        return this;\n    }\n    /** Provides the inputs 'name', to be used by forms. */\n    name(name) {\n        this._name = name;\n        return this;\n    }\n    /** Determines whether the input is non-interactive. */\n    disabled(disabled) {\n        this._disabled = disabled;\n        return this;\n    }\n    // disallow setting value through attribute\n    attr(k, v) {\n        if (k === \"value\" || k === \"onchange\")\n            return this;\n        return super.attr(k, v);\n    }\n    attrs(attributes) {\n        delete attributes.value;\n        delete attributes.onchange;\n        return super.attrs(attributes);\n    }\n    /** Provides a callback function that is called just after the input value changes. */\n    onValueChanged(callback) {\n        this._onValueChanged = callback;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        out.type = this.type;\n        if (this._value !== undefined) {\n            const v = INPUT_TYPE_TRANSLATORS[this.type](...this._value);\n            out.value = v;\n        }\n        out.prevValue = out.value;\n        window.addEventListener(\"input\", e => {\n            if (e.target === out)\n                out.prevValue = out.value;\n        });\n        if (this._onValueChanged) { // calling callback after value changed\n            const valueCallback = this._onValueChanged;\n            out.addEventListener(\"input\", () => valueCallback(out.value, out.prevValue));\n        }\n        if (this._name !== undefined)\n            out.name = this._name;\n        if (this._disabled)\n            out.disabled = true;\n        return out;\n    }\n}\nexports.InputAssemblyLine = InputAssemblyLine;\nclass ButtonLikeInputAssemblyLine extends InputAssemblyLine {\n    /** Provides a callback function for when the button is clicked. */\n    onClick(callback) {\n        this._onClick = callback;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        if (this._onClick) { // calling callback when clicked\n            const clickCallback = this._onClick; // move to local scope\n            out.addEventListener(\"click\", () => clickCallback(out.value));\n        }\n        return out;\n    }\n}\nexports.ButtonLikeInputAssemblyLine = ButtonLikeInputAssemblyLine;\nclass CheckableInputAssemblyLine extends InputAssemblyLine {\n    constructor(type) {\n        super(type);\n        this._checked = false;\n    }\n    /** Determines whether the checkbox starts out checked. */\n    checked(checked) {\n        this._checked = checked;\n        return this;\n    }\n    /** Provides a callback for just after the input is (un)checked. */\n    onCheckedChanged(callback) {\n        this._onCheckedChanged = callback;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        out.checked = this._checked;\n        out.wasChecked = out.checked;\n        window.addEventListener(\"input\", e => {\n            if (e.target === out) {\n                if (out.wasChecked = out.checked)\n                    out.setAttribute(\"was-checked\", \"\");\n                else\n                    out.removeAttribute(\"was-checked\");\n            }\n        });\n        if (this._onCheckedChanged) { // calling callback when (un)checked just after change\n            const checkCallback = this._onCheckedChanged;\n            out.addEventListener(\"input\", () => checkCallback(out.checked, out.wasChecked));\n        }\n        return out;\n    }\n}\nexports.CheckableInputAssemblyLine = CheckableInputAssemblyLine;\nclass RangedInputAssemblyLine extends InputAssemblyLine {\n    constructor(type) {\n        super(type);\n        this._step = 1;\n    }\n    /** Provides a minimum value for the input. */\n    min(minValue) {\n        this._min = minValue;\n        return this;\n    }\n    /** Provides a maximum value for the input. */\n    max(minValue) {\n        this._min = minValue;\n        return this;\n    }\n    /** Defines the smallest amount the input value can change. */\n    step(step) {\n        this._step = step;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        if (this._min !== undefined)\n            out.min = INPUT_TYPE_TRANSLATORS[this.type](...this._min);\n        if (this._max !== undefined)\n            out.max = INPUT_TYPE_TRANSLATORS[this.type](...this._max);\n        out.step = this._step.toString();\n        return out;\n    }\n}\nexports.RangedInputAssemblyLine = RangedInputAssemblyLine;\nclass NumberInputAssemblyLine extends RangedInputAssemblyLine {\n    make() {\n        const out = super.make();\n        out.prevValueAsNumber = Number.parseFloat(out.prevValue);\n        window.addEventListener(\"change\", e => {\n            if (e.target === out)\n                out.prevValueAsNumber = Number.parseFloat(out.prevValue);\n        });\n        return out;\n    }\n}\nexports.NumberInputAssemblyLine = NumberInputAssemblyLine;\nclass DateInputAssemblyLine extends RangedInputAssemblyLine {\n    make() {\n        const out = super.make();\n        out.prevValueAsDate = new Date(out.prevValue);\n        window.addEventListener(\"change\", e => {\n            if (e.target === out)\n                out.prevValueAsDate = new Date(out.prevValue);\n        });\n        return out;\n    }\n}\nexports.DateInputAssemblyLine = DateInputAssemblyLine;\nclass TextInputAssemblyLine extends InputAssemblyLine {\n    constructor(type) {\n        super(type);\n    }\n    /** Provides the datalist (by id or reference) for suggestions on the input value. */\n    list(listId) {\n        this._list = typeof listId === \"string\" ? listId : listId.id;\n        return this;\n    }\n    /** Determines the minimum allowed length. */\n    minLength(bound) {\n        this._minLength = Math.floor(bound);\n        return this;\n    }\n    /** Determines the maximum allowed length. */\n    maxLength(bound) {\n        this._maxLength = Math.floor(bound);\n        return this;\n    }\n    /** Provides a placeholder which is shown when the input is empty. */\n    placeholder(placeholder) {\n        this._placeholder = placeholder;\n        return this;\n    }\n    /** Determines whether the text-like input accepts user-input. */\n    readonly(ro) {\n        this._readonly = ro;\n        return this;\n    }\n    /** Provides the input width (in characters). */\n    size(size) {\n        this._size = Math.floor(size);\n        return this;\n    }\n    /** Whether spellcheck is enabled. */\n    spellcheck(doSpellcheck) {\n        this._spellcheck = doSpellcheck;\n        return this;\n    }\n    make() {\n        const out = super.make();\n        if (this._list !== undefined)\n            out.setAttribute(\"list\", this._list);\n        if (this._minLength !== undefined)\n            out.minLength = this._minLength;\n        if (this._maxLength !== undefined)\n            out.maxLength = this._maxLength;\n        if (this._placeholder)\n            out.placeholder = this._placeholder;\n        if (this._readonly)\n            out.readOnly = this._readonly;\n        if (this._size !== undefined)\n            out.size = this._size;\n        if (this._spellcheck)\n            out.spellcheck = this._spellcheck;\n        return out;\n    }\n}\nexports.TextInputAssemblyLine = TextInputAssemblyLine;\n\n\n//# sourceURL=webpack://gws-website/./src/common/html-element-factory/InputAssemblyLine.ts?");

/***/ }),

/***/ "./src/common/util/DateUtil.ts":
/*!*************************************!*\
  !*** ./src/common/util/DateUtil.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ObjectUtil_1 = __importDefault(__webpack_require__(/*! ./ObjectUtil */ \"./src/common/util/ObjectUtil.ts\"));\nconst WEEK_DAY_INDICES = {\n    Monday: 1,\n    Tuesday: 2,\n    Wednesday: 3,\n    Thursday: 4,\n    Friday: 5,\n    Saturday: 6,\n    Sunday: 0\n};\nObject.freeze(WEEK_DAY_INDICES);\nclass DateUtil {\n    /** The earliest possible representable Date. */\n    static get FIRST() { return new Date(-8640000000000000); }\n    /** The latest possible representable Date. */\n    static get LAST() { return new Date(8640000000000000); }\n}\n_a = DateUtil;\n/** Methods related to days. */\nDateUtil.Days = {\n    /** Finds the first of a certain weekday before the given Date. */\n    firstBefore(d, day) {\n        const ind = WEEK_DAY_INDICES[day];\n        const out = new Date(d);\n        while (out.getDay() !== ind)\n            out.setDate(out.getDate() - 1);\n        out.setHours(0, 0, 0, 0);\n        return out;\n    },\n    /** Finds the first of a certain weekday after the given Date. */\n    firstAfter(d, day) {\n        const ind = WEEK_DAY_INDICES[day];\n        const out = new Date(d);\n        while (out.getDay() !== ind)\n            out.setDate(out.getDate() + 1);\n        out.setHours(0, 0, 0, 0);\n        return out;\n    },\n    /** Wether the two given Dates fall on the same date. */\n    isSame(a, b) {\n        return a.getFullYear() === b.getFullYear()\n            && a.getMonth() === b.getMonth()\n            && a.getDate() === b.getDate();\n    },\n    /** Whether the given date is on Saturday or Sunday. */\n    isWeekend(d) {\n        return d.getDay() === 0 || d.getDay() === 6;\n    },\n    /**\n     * Determines whether ```date``` is between the dates which ```start``` and ```end``` fall in.\n     * @param date\n     * @param start Date within starting date\n     * @param end Date within ending date\n     * @returns true ```date``` falls between the dates of ```start``` and ```end```\n     */\n    isBetween(date, start, end) {\n        [date, start, end] = [date, start, end].map(_a.Timestamps.copy);\n        start.setHours(0, 0, 0, 0);\n        end.setHours(23, 59, 59, 999);\n        return date >= start && date <= end;\n    },\n    /**\n     * Determines whether the day 'a' falls in is an earlier one than that of 'b'.\n     * @param a Date 'a'\n     * @param b Date 'b'\n     * @returns true if day of 'a' < day of 'b'\n     */\n    earlierThan(a, b) {\n        return a.getFullYear() < b.getFullYear()\n            || (a.getFullYear() === b.getFullYear() && a.getMonth() < b.getMonth())\n            || (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() < b.getDate());\n    },\n    /** Determines whether the day 'a' falls in is the same or an earlier one than that of 'b'. */\n    earlierOrSame(a, b) {\n        return this.isSame(a, b) || this.earlierThan(a, b);\n    },\n    /**\n     * Determines whether the day 'a' falls in is a later one than that of 'b'.\n     * @param a Date 'a'\n     * @param b Date 'b'\n     * @returns true if day of 'a' > day of 'b'\n     */\n    laterThan(a, b) {\n        return a.getFullYear() > b.getFullYear()\n            || (a.getFullYear() === b.getFullYear() && a.getMonth() > b.getMonth())\n            || (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() > b.getDate());\n    },\n    /** Determines whether the day 'a' falls in is the same or a later one than that of 'b'. */\n    laterOrSame(a, b) {\n        return this.isSame(a, b) || this.laterThan(a, b);\n    },\n    /**\n     * Determines how many days the range of [from, to] falls in.\n     * @param from\n     * @param to\n     * @returns number of days [from, to] falls in\n     */\n    spanInDays(from, to) {\n        if (from > to)\n            [from, to] = [to, from]; // put in correct order\n        const d = new Date(from);\n        let out = 1;\n        while (!_a.Days.isSame(d, to)) {\n            out++;\n            d.setDate(d.getDate() + 1);\n        }\n        return out;\n    },\n    /**\n     * Computes a range of dates.\n     * @param start starting date\n     * @param end either the end date, or the amount of days\n     * @returns array of all days [start, end] falls in\n     */\n    getRange(start, end) {\n        start = new Date(start); // copy value\n        start.setHours(0, 0, 0, 0);\n        if (typeof end === \"number\") {\n            const numDays = end;\n            end = new Date(start);\n            end.setDate(end.getDate() + numDays);\n        }\n        else\n            end = new Date(end); // copy value\n        if (start > end)\n            return [];\n        const out = [];\n        do {\n            out.push(new Date(start));\n            start.setDate(start.getDate() + 1);\n        } while (!_a.Days.isSame(start, end));\n        return out;\n    }\n};\n/** Methods that deal ranges of timestamps. */\nDateUtil.Timespans = {\n    /**\n     * Determines whether the given timespans overlap.\n     * @param a first timespan\n     * @param b second timespan\n     * @returns true if ```a``` and ```b``` overlap\n     */\n    overlap(a, b) {\n        return b[1] >= a[0] && b[0] <= a[1];\n    },\n    /**\n     * Determines whether any days within the given timespans overlap.\n     * @param a first timespan\n     * @param b second timespan\n     * @returns true if days of ```a``` and ```b``` overlap\n     */\n    daysOverlap(a, b) {\n        return _a.Days.laterOrSame(b[1], a[0]) && _a.Days.earlierOrSame(b[0], a[1]);\n    },\n    /**\n     * Whether the given timespan starts on midnight and ends just before midnight.\n     * @param timespan\n     * @param useMilliseconds whether to consider milliseconds\n     */\n    areFullDays(timespan, useMilliseconds = false) {\n        const [from, to] = timespan;\n        return from.getHours() === 0\n            && from.getMinutes() === 0\n            && from.getSeconds() === 0\n            && (!useMilliseconds || from.getMilliseconds() === 0)\n            && to.getHours() === 23\n            && to.getMinutes() === 59\n            && to.getSeconds() === 59\n            && (!useMilliseconds || to.getMilliseconds() === 999);\n    }\n};\n/** Methods that deal with exact moments in time. */\nDateUtil.Timestamps = {\n    /** Determines the earliest of the given Date objects. */\n    earliest(d1, ...dRest) {\n        let earliest = d1;\n        dRest.forEach(d => earliest = d < earliest ? d : earliest);\n        return earliest;\n    },\n    /** Determines the latest of the given Date objects. */\n    latest(d1, ...dRest) {\n        let earliest = d1;\n        dRest.forEach(d => earliest = d > earliest ? d : earliest);\n        return earliest;\n    },\n    /** Gives the first moment before the given date. */\n    justBefore(d) {\n        d = new Date(d);\n        d.setMilliseconds(d.getMilliseconds() - 1);\n        return d;\n    },\n    /** Gives the first moment after the given date. */\n    justAfter(d) {\n        d = new Date(d);\n        d.setMilliseconds(d.getMilliseconds() + 1);\n        return d;\n    },\n    /**\n     * Computes a timestamp from the value of a date-type input and a time-type input/\n     * @param date date input / date input value\n     * @param time time input / time input value\n     * @returns timestamp from input values\n     */\n    fromInputs(date, time) {\n        if (date instanceof HTMLInputElement) {\n            if (date.type !== \"date\")\n                throw new Error(`parameter 'date' is not a date input (is \"${date.type}\" instead)`);\n            date = date.value;\n        }\n        if (time instanceof HTMLInputElement) {\n            if (time.type !== \"time\")\n                throw new Error(`parameter 'time' is not a time input (is \"${time.type}\" instead)`);\n            time = time.value;\n        }\n        let [year, month, day] = date.split('-').map(s => Number.parseInt(s)).filter(n => !isNaN(n));\n        year || (year = 1970);\n        month || (month = 1);\n        month--; // convert to index\n        day || (day = 1);\n        let [hours, minutes, seconds, millis] = time.split(':').map(s => Number.parseInt(s)).filter(n => !isNaN(n));\n        hours || (hours = 0);\n        minutes || (minutes = 0);\n        seconds || (seconds = 0);\n        millis || (millis = 0);\n        return new Date(year, month, day, hours, minutes, seconds, millis);\n    },\n    /** Makes a copy of the given timestamp. */\n    copy(d) {\n        return new Date(d);\n    },\n    isValid(d) {\n        return !isNaN(d.getTime());\n    }\n};\nDateUtil.DATE_FORMATS = {\n    DAY: {\n        SHORT_NO_YEAR: (d, lang = \"nl-NL\") => d.toLocaleDateString(lang, { day: \"numeric\", month: \"short\" }),\n        SHORT: (d, lang = \"nl-NL\") => d.toLocaleDateString(lang, { day: \"numeric\", month: \"short\", year: \"numeric\" }),\n        MEDIUM: (d, lang = \"nl-NL\") => d.toLocaleDateString(lang, { dateStyle: \"medium\" }),\n        LONG: (d, lang = \"nl-NL\") => d.toLocaleDateString(lang, { weekday: \"long\", day: \"numeric\", month: \"long\" })\n    },\n    TIME: {\n        SHORT: (d, lang = \"nl-NL\") => d.toLocaleTimeString(lang, { timeStyle: \"short\" })\n    },\n    DAY_AND_TIME: {\n        SHORT_NO_YEAR: (d, lang = \"nl-NL\") => `${_a.DATE_FORMATS.DAY.SHORT_NO_YEAR(d, lang)} (${_a.DATE_FORMATS.TIME.SHORT(d, lang)})`,\n        SHORT: (d, lang = \"nl-NL\") => `${_a.DATE_FORMATS.DAY.SHORT(d, lang)} (${_a.DATE_FORMATS.TIME.SHORT(d, lang)})`\n    },\n    DURATION: {\n        HOURS_AND_MINUTES: (start, end) => {\n            let millis = end.getTime() - start.getTime();\n            const hours = Math.floor(millis / 3600000);\n            millis %= 3600000;\n            const minutes = Math.round(millis / 60000);\n            return `${hours} uur en ${minutes} minuten`;\n        }\n    }\n};\n(() => {\n    ObjectUtil_1.default.deepFreeze(_a.Days);\n    ObjectUtil_1.default.deepFreeze(_a.Timespans);\n    ObjectUtil_1.default.deepFreeze(_a.Timestamps);\n    ObjectUtil_1.default.deepFreeze(_a.DATE_FORMATS);\n})();\nexports[\"default\"] = DateUtil;\n\n\n//# sourceURL=webpack://gws-website/./src/common/util/DateUtil.ts?");

/***/ }),

/***/ "./src/common/util/NumberUtil.ts":
/*!***************************************!*\
  !*** ./src/common/util/NumberUtil.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass NumberUtil {\n    /** Limits 'n' between 'lower' and 'upper' */\n    static clamp(n, lower = -Infinity, upper = Infinity) {\n        return Math.max(lower, Math.min(upper, n));\n    }\n}\nexports[\"default\"] = NumberUtil;\n\n\n//# sourceURL=webpack://gws-website/./src/common/util/NumberUtil.ts?");

/***/ }),

/***/ "./src/common/util/ObjectUtil.ts":
/*!***************************************!*\
  !*** ./src/common/util/ObjectUtil.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass ObjectUtil {\n    static deepCopy(arg) {\n        if (typeof arg === \"object\") {\n            if (Array.isArray(arg))\n                return [...arg].map(this.deepCopy); // is array\n            else if (arg instanceof Date)\n                return new Date(arg);\n            else { // some other object\n                const out = {};\n                for (const k in arg)\n                    out[k] = this.deepCopy(arg[k]);\n                return out;\n            }\n        }\n        else\n            return arg; // copy primitive by value\n    }\n    static deepFreeze(obj) {\n        // look foor object-properties and deepfreeze those too\n        for (const k of Object.keys(obj)) {\n            const v = obj[k];\n            if (typeof v === \"object\")\n                this.deepFreeze(v);\n        }\n        Object.freeze(obj);\n    }\n    static mapToObject(arr, callbackfn) {\n        const out = {};\n        arr.forEach((e, i, a) => out[e] = callbackfn(e, i, a));\n        return out;\n    }\n}\nexports[\"default\"] = ObjectUtil;\n\n\n//# sourceURL=webpack://gws-website/./src/common/util/ObjectUtil.ts?");

/***/ }),

/***/ "./src/modules/create-split-view.ts":
/*!******************************************!*\
  !*** ./src/modules/create-split-view.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// this script puts the content div into a split-view together with the news-letters and sponsors\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ElementFactory_1 = __importDefault(__webpack_require__(/*! ../common/html-element-factory/ElementFactory */ \"./src/common/html-element-factory/ElementFactory.ts\"));\n// create split-view before page loads\nconst SPLIT_VIEW = ElementFactory_1.default.div(\"split-view\")\n    .children(ElementFactory_1.default.div(\"news-letters\", \"boxed\")\n    .children(ElementFactory_1.default.h3(\"Nieuwsbrieven\").class(\"section-name\"), ElementFactory_1.default.div(\"news-letters-list\", \"flex-rows\", \"main-axis-start\")\n    .children(ElementFactory_1.default.p(\"Nieuwsbrief juni 2023\"), ElementFactory_1.default.p(\"Nieuwsbrief april 🐥🌻\"), ElementFactory_1.default.p(\"Nieuwsbrief maart🌹\"), ElementFactory_1.default.p(\"Nieuwsbrief februari💚💛\"), ElementFactory_1.default.p(\"Nieuwsbrief December\"))), ElementFactory_1.default.div(\"sponsors\", \"boxed\", \"flex-rows\")\n    .children(ElementFactory_1.default.h3(\"Onze sponsoren\").class(\"section-name\"), ElementFactory_1.default.div(undefined, \"logos\", \"flex-rows\", \"main-axis-center\", \"cross-axis-center\")\n    .children(ElementFactory_1.default.a(\"https://www.bol.com/nl/\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/bol_com.png\", \"Bol.com\")\n    .class(\"click-action\")), ElementFactory_1.default.a(\"https://debiebnijmegen.nl/\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/de_bieb.webp\", \"De Bieb\")\n    .class(\"click-action\")), ElementFactory_1.default.a(\"https://www.dressmeclothing.nl/\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/dressme.png\", \"Dress-me kleding\")\n    .class(\"click-action\")), ElementFactory_1.default.a(\"https://www.knaek.nl/studentenkorting/nijmegen\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/Knaek-logo.png\", \"Knaek studentenkorting\")\n    .class(\"click-action\")), ElementFactory_1.default.a(\"https://kbanijmegen.nl/\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/kba.webp\", \"KBA Nijmegen\")\n    .class(\"click-action\")), ElementFactory_1.default.a(\"https://www.researchned.nl/\").openInNewTab(true)\n    .class(\"center-content\")\n    .children(ElementFactory_1.default.img(\"./images/logos/researchned.webp\", \"ResearchNed\")\n    .class(\"click-action\")))))\n    .make();\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    const contentElement = document.getElementsByClassName(\"content\")[0];\n    if (contentElement === undefined)\n        throw new Error(\"split-view insertion failed: no content element found\");\n    else {\n        contentElement.parentNode.insertBefore(SPLIT_VIEW, contentElement);\n        SPLIT_VIEW.prepend(contentElement);\n    }\n});\n\n\n//# sourceURL=webpack://gws-website/./src/modules/create-split-view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/modules/create-split-view.ts");
/******/ 	
/******/ })()
;